# WebPack ImageText Properties
# ----------------------------
# Version 1.0
# 
# Properties file for the Amarantin Java WebPack TextImage class.
#
# If a property is left out in this file, it is automatically
# set to it's default value by the TextImage class.

# ------------------
# General properties
# ------------------

# alwaysCreateNew 
# ---------------
# Description: if true new images will always be created and saved. This is 
# useful during development and when creating the design of the images
# Area of effect: produced image
# Allowed values: false/true
# Default value: true
# example: alwaysCreateNew = true
alwaysCreateNew = false

# fontFolderPath 
# --------------
# Description: absolute path to folder containing physical (true type) font files.
# Area of effect: font of produced image
# Allowed values: null or an absolute path to a folder containing .ttf files
# Default value: null, required if a physical font is used
# Example: fontFolderPath = c:\\windows\fonts
fontFolderPath = c:\\windows\\fonts

# imageFolderPath
# ---------------
# Description: path to the images folder where all produced images are stored.
# The backgrounds folder must be placed in this folder for the ImageText class
# to find nackground images (right, left and back images).
#
# The images folder path must be set either in this properties file or set using 
# the setImagesFolderPath method in TextImage class.
#
# Area of effect: location of produced images
# Allowed values: an absolute file path
# Default value: none, required parameter
# example: imageFolderPath = C:\\tomcat\\webapps\\WebPack\\images
imageFolderPath = C:\\utveckling\\apache-tomcat\\webapps\\SpaceRaze\\webb\\images

# logLevel 
# --------
# Description: determines log level. Log is written to std out, not to a 
# separate log file.
# Area of effect: writes feedback to standard out
# Allowed values: FINE/INFO/WARNING etc (see java.util.Level for details)
# Default value: INFO
# Example: logLevel = INFO
logLevel = INFO

# ----------------
# Image properties
# ----------------

# antiAlias 
# ---------
# Description: text is antialiased = rounded off edges
# Area of effect: produced image
# Allowed values: false/true
# Default value: true
# Example: antiAlias = true
antiAlias = false

# backColor 
# ---------
# Description: color of background as RGB value
# Area of effect: produced image
# Allowed values: 0-255,0-255,0-255 
# Default value: 0,0,0
# example: backColor = 0,0,0
backColor = 0,0,0

# bold 
# ----
# Description: bold effect on text
# Area of effect: text in produced image
# Allowed values: false/true
# Default value: false
# Example: bold = false
bold = true

# backImageName 
# -------------
# Description: name of the background image used in the autogenerated image file.
# This image must be placed in the background folder. This folder should always be 
# placed in the images folder, which is set to the path in the param imageFolderPath.
# Area of effect: produced image
# Allowed values: null, <filename>.gif, <filename>.jpg or other fileformat supported 
# by Java.
# Default value: null
# Example: backImageName = backimage.gif
backImageName = menu_tile1.gif

# bottomPadding 
# -------------
# Description: space between bottom of image and text if verticalAlign = bottom
# Area of effect: produced image
# Allowed values: any int
# Default value: 0
# Example: bottomPadding = 0
bottomPadding = 10

# dropShadow 
# ----------
# Description: 
# Area of effect: produced image
# Allowed values: false/true
# Default value: false
# Example: dropShadow = false

# dropShadowColor 
# ---------------
# Description: 
# Area of effect: produced image
# Allowed values: 0-255,0-255,0-255 
# Default value: 63,63,63
# example: backColor = 63,63,63

# dropShadowOffsetX 
# -----------------
# Description: x offset for the dropshadow
# Area of effect: produced image
# Allowed values: any int
# Default value: 1
# Example: dropShadow = 1

# dropShadowOffsetY 
# -----------------
# Description: y offset for the dropshadow
# Area of effect: produced image
# Allowed values: any int 
# Default value: 1
# Example: dropShadow = 1

# fontSize 
# --------
# Description: size of text in image
# Area of effect: text in produced image
# Allowed values: any int
# Default value: 15
# Example: fontSize = 12
fontSize = 14

# foreColor 
# ---------
# Description: color of text as RGB value
# Area of effect: produced image
# Allowed values: 0-255,0-255,0-255
# Default value: 255,255,255
# example: foreColor = 255,255,255
foreColor = 255,191,0

# horisontalAlign 
# ---------------
# Description: Horisontal position of the text
# Area of effect: produced image
# Allowed values: left/center/right
# Default value: center
# Example: horisontalAlign = center

# italic 
# ------
# Description: italic effect of text
# Area of effect: text in produced image
# Allowed values: false/true
# Default value: false
# Example: italic = false

# JpegQuality 
# -----------
# Description: quality property of created jpeg images
# Area of effect: produced image
# Allowed values: 0-100
# Default value: 100
# Example: JpegQuality = 100

# leftImageName 
# -------------
# Description: name of the background image painted on the left edge of the produced
# image file.
# Area of effect: produced image
# Allowed values: <filename>.gif, <filename>.jpg or other fileformat supported by 
# Java.
# Default value: null
# Example: leftImageName = leftimage.gif
leftImageName = menu_start1.gif

# leftPadding 
# -----------
# Description: space between left edge of image and text if horisontalAlign = left
# Area of effect: produced image
# Allowed values: any int
# Default value: 0
# Example: leftPadding = 0

# logicalFontName 
# ---------------
# Description: name of a logical font (internal Java) name. 
#
# If both a logical and a physical font i set, the logical is used.
#
# Area of effect: font in produced image
# Allowed values: All Java logical fonts, Serif, SansSerif, Monospaced, Dialog etc..
# Default value: SansSerif
# example: logicalFontName = SansSerif
logicalFontName = Monospaced

# physicalFontName 
# ----------------
# Description: name of a physical (true type) font file name. The suffix ".TTF" must 
# be excluded. This font must be located in the folder that the property 
# fontFolderPath sets.
#
# If both a logical and a physical font i set, the logical is used.
#
# Area of effect: font in produced image
# Allowed values: any true type font filename (excluding .ttf) in the font folder
# Default value: null
# example: physicalFontName = times

# rightImageName 
# --------------
# Description: name of the background image painted on the right edge of the produced
# image file.
# Area of effect: produced image
# Allowed values: <filename>.gif, <filename>.jpg or other fileformat supported by 
# Java.
# Default value: null
# Example: rightImageName = rightimage.gif
rightImageName = menu_end1.gif

# rightPadding 
# ------------
# Description: space between right edge of image and text if horisontalAlign = right
# Area of effect: produced image
# Allowed values: any int
# Default value: 0
# Example: rightPadding = 0

# topPadding 
# ----------
# Description: space between top of image and text if verticalAlign = top
# Area of effect: produced image
# Allowed values: any int
# Default value: 0
# Example: topPadding = 0

# verticalAlign 
# -------------
# Description: Vertical position of the text
# Area of effect: produced image
# Allowed values: top/middle/bottom
# Default value: middle
# Example: verticalAlign = middle
verticalAlign = bottom

# wrap 
# ----
# Description: wraps the text if the text width is wider than the image width
# Area of effect: text in produced image
# Allowed values: false/true
# Default value: false
# Example: wrap = false

# ---------------------------------------------
# Properties that affect both image and IMG tag 
# ---------------------------------------------

# backImageSetting 
# ----------------
# Description: affects how the back image is handled. 
#
# "none" removes all settings for backImage.
#
# "scale" sets width and height automatically using the size of the background image.
# WARNING: be careful to use this (=true), because this puts extra load
# compared to not using it (=false), and use instead width and height to
# scale image (which is faster).
#
# "scale" repeats (tiles) the backImage from left to right until the whole image 
# is covered
#
# Area of effect: produced image and html-tag
# Allowed values: none/repeat/scale
# Default value: none
# Example: backImageSetting = repeat
backImageSetting = repeat

# height 
# ------
# Description: height of produced image and height property in img tag
# Area of effect: produced image and html tag
# Allowed values: any int
# Default value: 20
# example: height = 25
height = 23

# imageFormat 
# -----------
# Description: file format of the produced image
# Area of effect: produced image
# Allowed values: gif/jpeg
# Default value: gif
# Example: imageFormat = gif

# setWidthFromText 
# ----------------
# Description: sets the width of created images to the width of text + leftPadding + rightPadding.
# Area of effect: produced image width and img tag
# Allowed values: false / true 
# Default value: false
# Example: setWidthFromText = false

# width 
# -----
# Description: width of produced image and width property in img tag
# Area of effect: produced image and html tag
# Allowed values: any int
# Default value: 200
# example: width = 200
width = 140

# ------------------
# IMG tag properties
# ------------------

# attributes 
# ----------
# Description: extra attribute(s) that will be inserted into the img tag
# Area of effect: produced img html tag
# Allowed values: null or any string containing img tag attributes
# Default value: null
# Example: attributes = onclick='myFunc()'
attributes = border=0

# cssClass 
# --------
# Description: inserts into the img tag a class attribute with the value 
# in this param.
# Area of effect: produced img html tag
# Allowed values: any string containing a css class name
# Default value: null
# Example: cssClass = myClass

# horisontalspace 
# ---------------
# Description: includes a hspace attribute in the img tag and sets it to 
# the value of this param
# Area of effect: html-tag
# Allowed values: any int
# Default value: 0
# Example: horisontalspace = 0

# imageAlign 
# ----------
# Description: adds an align html attribute to the img tag, with the value
# of this property.
#
# Allowed values, look at:
#
# ttp://msdn.microsoft.com/library/default.asp?url=/
# workshop/author/dhtml/reference/properties/align_0.asp
#
# Area of effect: produced html tag
# Default value: null
# Allowed values: null or left/bottom/middle/top/right etc..
# Example: imageAlign = null

# verticalspace 
# -------------
# Description: includes a vspace attribute in the img tag and sets it to 
# the value of this param
# Area of effect: html-tag
# Allowed values: any int
# Default value: 0
# Example: verticalspace = 0

# --------------------------
# Image file name properties
# --------------------------

# filenamePrefix 
# --------------
# Description: file name prefix for all image files with autogenerated filenames.
# The prefix is not used when methods are used where filename is explicitedly named.
# If using the createFiles method and explicitedly naming file (with a second delimiter) suffix 
# is not used either. 
# Area of effect: produced image file
# Allowed values: any string with characters allowed in filenames 
# Default value: "" (the empty string)
# Example: filenamePrefix = btn_

# lowerCaseFileNames 
# ------------------
# Description: if true all chars in any autogenerated filename will be lower case.
# LowerCaseFileNames is not used when methods are used where filename is explicitedly named.
# If using the createFiles method and explicitedly naming file (with a second delimiter) LowerCaseFileNames 
# is not used either. 
# Area of effect: produced image file
# Allowed values: false / true 
# Default value: false
# Example: lowerCaseFileNames = false

# replaceSpaceInFileNames 
# -----------------------
# Description: replaces all white space in file names when creating images with autogenerated 
# filenames.
# ReplaceSpaceInFileNames is not used when methods are used where filename is explicitedly named.
# If using the createFiles method and explicitedly naming file (with a second delimiter) ReplaceSpaceInFileNames 
# is not used either. 
# Area of effect: produced image file
# Allowed values: any string with characters allowed in filenames 
# Default value: blank (" ")
# Example: replaceSpaceInFileNames = _
# Example 2 (to remove blanks): replaceSpaceInFileNames = 

